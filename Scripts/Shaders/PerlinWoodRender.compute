// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel Particles
#include "../SimplexNoise.cginc"
#include "../HsvRgb.cginc"
//perlin noise https://www.reddit.com/r/Unity3D/comments/756odp/is_it_possible_to_use_anything_similar_to/

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float time;
float deltaTime;
float speedMult;//not used
float scaleMult;//used as grain spacing
//float grainSpacing = 1;

float2 touchPos;

struct Particle {
    float2 pos;
    float speed;
    float4 color;
};

RWStructuredBuffer<Particle> particles;
//Particle particles[10000];

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    //Result[id.xy] = Source[id.xy];
    float fac = 1;
    Result[id.xy] = Result[id.xy] * fac + float4(0, 0, 0, 0)*(1-fac);// float4(snoise(float2(id.xy / 50.0), 10) * 0.5 + 0.5, 0, 0, 0)* (1 - fac);
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    //snoise(float2(0, 1));
    //Result[id.xy] = float4(1, 0, 0, 0);
}

[numthreads(100, 1, 1)]
void Particles(uint3 id : SV_DispatchThreadID)
{
    scaleMult *= 2;
    // TODO: insert actual code here!
    //Result[id.xy] = Source[id.xy];
    //Particle particle = particles[id.x].y;
    //Result[id.x] = float4(1, 0, 0, 0);
    //Result[id.xy] = float4(snoise(float2(id.xy / 50.0), 10) * 0.5 + 0.5, 0, 0, 0);
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    //snoise(float2(0, 1));
    //particles[id.x].y[0];
    //Particle particle = particles[id.x * 100 + id.y];
    //particle.y[0] = snoise(float2(id.xy/30.0), 10)*100;
    //Particle particle;
    //particles[0] = particle;
    Particle p = particles[id.x];
    if (p.speed == 0)particles[id.x].speed = 1;
    float x = p.pos.x;//*scaleMult
    //float3 hsv = float3(0.4+(snoise(float2(x / 800.0, time / 200.0), 10)+1.0) * 0.20, (snoise(float2(x / 800.0, time / 200.0), 4)+1.0)/30.0/grainSpacing*time % 1.0, 1.0);
    //grainSpacing = 1;//0.4 + (snoise(float2(x / 800.0, time / 5.0), 10) + 1.0) * 0.20
    float3 hsv = float3(rgbHsv(p.color).x, (((snoise(float2(x / (800.0*scaleMult), time / 50.0), 4)+1.0)*10 + time)) % 1.0, 0.5);
    float4 after = float4(hsvRgb(hsv), 0);
    //float4 after = float4(hsvRgb(float3(1, 1, 1)), 0);
    float fac = 0;
    //Gaussian from wikipedia https://en.wikipedia.org/wiki/Gaussian_function
    float a = 1.0;
    float b = touchPos.x;
    float c = 100;
    float gaussian = a*exp(-(x-b)* (x - b)/(2.0*c*c))*0.5+0.5;
    //float gaussian = 1;
    particles[id.x].pos.y += (snoise(float2(particles[id.x].pos.x/800.0, time/2.50), 10)+1)*speedMult/50.0/2.0*gaussian;
    //particles[id.x].pos.y += 1;
    p = particles[id.x];
    //float angle = snoise(float3(p.pos.xy / (500.0*scaleMult), time), 10) * 10.0;
    //particles[id.x].pos += float2(cos(angle), sin(angle))*p.speed*speedMult;
    //Result[p.xy] = after;
    Result[float2(p.pos.x, p.pos.y)] = after;
}

//float sat = (((snoise(float2(x, time), 4) + 1.0) * 10 + time)) % 1.0;
//float3 hsv = float3(rgbHsv(p.color).x, sat, 0.5);